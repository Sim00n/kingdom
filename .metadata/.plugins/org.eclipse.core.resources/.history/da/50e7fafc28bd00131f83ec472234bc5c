package net.lsrp.kingdom.network;
import java.io.IOException;
import java.net.InetAddress;

import net.lsrp.kingdom.Game;
import net.lsrp.kingdom.input.Chat;
import net.lsrp.kingdom.network.Network.AddCharacter;
import net.lsrp.kingdom.network.Network.ChatMessage;
import net.lsrp.kingdom.network.Network.ConnectionEstablished;
import net.lsrp.kingdom.network.Network.Login;
import net.lsrp.kingdom.network.Network.MoveCharacter;
import net.lsrp.kingdom.network.Network.Register;
import net.lsrp.kingdom.network.Network.RegistrationRequired;
import net.lsrp.kingdom.network.Network.RemoveCharacter;
import net.lsrp.kingdom.network.Network.UpdateCharacter;

import com.esotericsoftware.kryonet.Client;
import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Listener;
import com.esotericsoftware.kryonet.Listener.ThreadedListener;


public class KryoClient {

	public static Client client;
	Login login = new Login();
	
	public KryoClient() {
		client = new Client();
		client.start();
		
		Network.register(client);
		
		client.addListener(new ThreadedListener(new Listener() {
			@Override
			public void connected(Connection c) {
				System.out.println("client side connection");
			}
			
			@Override
			public void received(Connection connection, Object object) {
				if(object instanceof RegistrationRequired) {
					Register register = new Register();
					register.name = login.name;
					client.sendUDP(register);
				}
				
				if(object instanceof AddCharacter) {
					System.out.println("Client AddCharacter");
					AddCharacter msg = (AddCharacter)object;
					if(!msg.character.name.equals(Game.username))
						Game.AddEnemy(msg.character);
					return;
				}
				
				if(object instanceof UpdateCharacter) {
					//System.out.println("Client UpdateCharacter");
					Game.UpdateEnemy((UpdateCharacter)object);
					return;
				}
				
				if(object instanceof RemoveCharacter) {
					System.out.println("Client RemoveCharacter");
					RemoveCharacter msg = (RemoveCharacter)object;
					Game.RemoveEnemy(msg.id);
					return;
				}
				
				if(object instanceof ConnectionEstablished) {
					ConnectionEstablished conne = (ConnectionEstablished)object;
					login.id = conne.id;
					Game.id = login.id;
					System.out.println(conne.motd);
				}
				
				if(object instanceof ChatMessage) {
					ChatMessage msg = (ChatMessage)object;
					Chat.addToChat(msg);
				}
			}
			
			@Override
			public void disconnected(Connection c) {
				System.out.println("qq??");
				System.exit(0);
			}
		}));
		
		try {
			client.connect(5000, InetAddress.getLocalHost(), Network.port, Network.port);
			System.out.println("tesT");
		} catch (IOException e) {
			e.printStackTrace();
			try {
				new KryoServer();
				client.connect(5000, InetAddress.getLocalHost(), Network.port, Network.port);
				System.out.println("tesT222");
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		login.name = Game.username;
		client.sendUDP(login);
		
		Thread ct = new Thread() {
			@Override
			public void run() {
				System.out.println("a");
				
				long lastTime = System.nanoTime();
				long timer = System.currentTimeMillis();
				final double ns = 1000000000.0 / 60.0;
				double delta = 0;
				int ticks = 0; 
				
				while(true)
				{
					if(Game.player != null)
					{
						long now = System.nanoTime();
						delta += (now - lastTime) / ns;
						lastTime = now;
						
						while(delta >= 1) {
							ticks++;
							delta--;
						}
						
						if(System.currentTimeMillis() - timer > 1000) {
							timer += 1000;
							Game.network_ticks = ticks;
							ticks = 0;
						}
						
						
						//System.out.println("uuu");
						MoveCharacter msg = new MoveCharacter();
						msg.id = login.id;
						msg.x = Game.player.x;
						msg.y = Game.player.y;
						msg.dx = Game.player.xa;
						msg.dy = Game.player.ya;
						client.sendUDP(msg);
						Game.ping = client.getReturnTripTime();
					} else {
						System.out.println(1);
					}
					try {
						Thread.sleep(Game.network_frames);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}	
			}
		};
		ct.start();
	}
	
	public static void sendChatMessageToAll(String message) {
		ChatMessage chat = new ChatMessage(Game.id, (int)(System.currentTimeMillis()/1000), message, Game.username);
		client.sendTCP(chat);
	}
	
}
